{"version":3,"sources":["components/controls/controls.tsx","components/slider/slider.tsx","components/controls/controls-data.ts","components/chart/chart.tsx","components/shudown-range/shutdown-range.tsx","components/simulator/use-generate-config.ts","components/simulator/data-generator.ts","components/simulator/optimal-weeks-generator.ts","components/headline/headline.tsx","components/simulator/simulator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Actions","useStyles","makeStyles","slider","width","Slider","title","onChange","percent","props","classes","getValue","value","undefined","Grid","container","direction","alignItems","spacing","item","Typography","min","className","aria-labelledby","valueLabelDisplay","valueLabelFormat","onChangeCommitted","event","name","max","id","variant","sliders","step","defaultValue","initialState","reduce","sliderValues","infectionStartDate","Date","totalPopulation","totalHospitalBeds","theme","createStyles","root","paddingTop","paddingLeft","paddingRight","divider","marginTop","marginBottom","reducer","state","action","type","CHANGE_SLIDER_VALUE","sliderName","CHANGE_START_DATE","CHANGE_POPULATION","CHANGE_BEDS","Controls","React","useReducer","dispatch","useEffect","onSliderChange","Paper","elevation","TextField","label","target","startDate","map","key","padding","chartContainer","height","Chart","config","containerProps","highcharts","Highcharts","options","marginLeft","marginLeftAuto","ShutdownRange","shutdownWeeks","computeOptimalWeeks","useState","start","end","addWeeks","ranges","setRanges","_shutdownWeeks","setShutdownWeeks","isWeekView","setIsWeekView","shutdown","range","differenceInWeeks","i","Array","fill","getShutdownWeeks","shutdownRanges","getShutdownRanges","removeRange","idx","splice","changeRange","date","onWeekToggle","evt","Number","checked","justify","Checkbox","color","week","Switch","IconButton","onClick","aria-label","Button","startIcon","rangeStart","length","_","currentRange","push","Week","params","weekStartDate","weekNum","healthy","newInfected","totalInfected","currentlyInfected","recovered","dead","hospitalized","Object","assign","this","weightedAverage","p0","p1","w0","w1","isShutdown","shutdowns","some","isWithinInterval","CHANGE_CONTROL","controls","CHANGE_SHUTDOWN","generateChartConfig","R0","shutdownR0","mortalityRate","mortalityRateOverflow","hospitalizationRate","lastWeekNum","weeks","r","fractionHealthy","mortality","Math","round","generateData","weeksToGo","currentWeekNum","differenceInCalendarWeeks","getWeeksToGo","series","data","forEach","obj","keys","visible","x","y","values","createSeries","subtitle","text","yAxis","xAxis","gridLineWidth","plotBands","s","from","to","plotLines","plotOptions","line","lineWidth","tooltip","formatter","shortNum","format","console","log","computeNextWeek","prev","prev2","prev3","result","flexGrow","Headline","content","flexBasis","display","Simulator","useGenerateConfig","onControlChange","onShutdownChange","optimalWeeks","setOptimalWeeks","utils","DateFnsUtils","current","next","next2","getOptimalWeeks","numWeeks","eachWeekOfInterval","menuButton","marginRight","App","AppBar","position","Toolbar","edge","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e5c7fc1.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport { Button, Typography } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport {\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\nimport {Slider} from '../slider/slider';\nimport {sliders} from './controls-data';\n\nexport interface ControlState {\n    R0?: number;\n    shutdownR0?: number;\n    mortalityRate?: number;\n    mortalityRateOverflow?: number;\n    hospitalizationRate?: number;\n    hospitalStayInWeeks?: number;\n    infectionStartDate?: Date;\n    totalPopulation?: number;\n    totalHospitalBeds?: number;\n}\n\ninterface Props {\n    onChange?: (controls: ControlState) => void;\n}\n\nenum Actions {\n    CHANGE_SLIDER_VALUE,\n    CHANGE_START_DATE,\n    CHANGE_POPULATION,\n    CHANGE_BEDS\n}\n\nconst initialState: ControlState = sliders.reduce((sliderValues, slider) => {\n    sliderValues[slider.name] = slider.defaultValue;\n    return sliderValues;\n}, {});\ninitialState.infectionStartDate = new Date('1/1/2020');\ninitialState.totalPopulation = 331000000;\ninitialState.totalHospitalBeds = 1000000;\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingTop: theme.spacing(4),\n      paddingLeft: theme.spacing(6),\n      paddingRight: theme.spacing(2),\n      width: 250\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    }\n  }),\n);\n\n\n\nfunction reducer(state, action) {\n    switch(action.type) {\n        case Actions.CHANGE_SLIDER_VALUE:\n            return {\n                ...state,\n                [action.sliderName]: action.value\n            }\n        case Actions.CHANGE_START_DATE:\n            return {\n                ...state,\n                infectionStartDate: action.infectionStartDate\n            }\n        case Actions.CHANGE_POPULATION:\n            return {\n                ...state,\n                totalPopulation: action.value\n            }\n        case Actions.CHANGE_BEDS:\n            return {\n                ...state,\n                totalHospitalBeds: action.value\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const Controls: React.FC<Props> = ({ onChange }) => {\n    const classes = useStyles();\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    useEffect(() => {\n        onChange(state);\n    }, [state]);\n\n    const onSliderChange = (sliderName: string, value?) => {\n        dispatch({\n            type: Actions.CHANGE_SLIDER_VALUE,\n            sliderName,\n            value\n        });\n    }\n\n    const onDateChange = (startDate: Date) => {\n        dispatch({\n            type: Actions.CHANGE_START_DATE,\n            startDate\n        })\n    }\n\n    const onPopulationChange = (event) => {\n        dispatch({\n            type: Actions.CHANGE_POPULATION,\n            value: event.target.value\n        })\n    }\n\n    const onBedsChanged = (event) => {\n        dispatch({\n            type: Actions.CHANGE_BEDS,\n            value: event.target.value\n        })\n    }\n\n    return (\n            <Paper elevation={3} className={classes.root}>\n                <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n                    <Grid item>\n                        <Typography>Control Values</Typography>\n                    </Grid>\n                    <Grid item>\n                        <TextField label=\"Total population\"\n                            onChange={onPopulationChange}\n                            value={state.totalPopulation}></TextField>\n                    </Grid>\n                    <Grid item>\n                        <KeyboardDatePicker \n                            onChange={onDateChange}\n                            variant=\"inline\" value={state.infectionStartDate} label='Infection Start date'></KeyboardDatePicker>\n                    </Grid>\n                    <Grid item>\n                        <TextField label=\"Total hospital beds\"\n                            onChange={onBedsChanged}\n                            value={state.totalHospitalBeds}></TextField>\n                    </Grid>\n                    {sliders.map(slider => <Grid item key={slider.name}>\n                        <Slider {...slider} onChange={onSliderChange}></Slider>\n                    </Grid>)}\n                </Grid>\n            </Paper>\n               \n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport {Slider as MaterialSlider, SliderProps as MaterialSliderProps} from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\n\ninterface SliderProps {\n    title: string;\n    percent?: boolean;\n    onChange: (name: string, value: number) => void;\n}\n\nconst useStyles = makeStyles({\n    slider: {\n      width: 150,\n    },\n  });\n  \n\nexport const Slider: React.FC<SliderProps & Omit<MaterialSliderProps, 'onChange'>> = ({title, onChange, percent = false, ...props}) => {\n    const classes = useStyles()\n\n    const getValue = (value: number | undefined) => {\n        if(value === undefined) {\n            return '';\n        }\n\n        if(percent) {\n            return `${value}%`;\n        }\n        return value;\n    }\n\n    const onSliderChange = (event, value?) => {\n        onChange(props.name, value);\n    }\n\n    return (\n        <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={0}>\n            \n            <Grid item container direction=\"row\" spacing={1} alignItems=\"center\">\n                <Grid item>\n                    <Typography>\n                        {getValue(props.min)}\n                    </Typography>\n                </Grid>\n                <Grid item className={classes.slider}>\n                    <MaterialSlider\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"on\"\n                        valueLabelFormat={getValue}\n                        onChangeCommitted={onSliderChange}\n                        {...props}\n                    />\n                </Grid>\n                <Grid>\n                    <Typography>\n                        {getValue(props.max)}\n                    </Typography>\n                </Grid>\n                \n            </Grid>\n            <Grid item>\n                <Typography id=\"discrete-slider\" variant=\"caption\">\n                    {title}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}","export const sliders = [\n    {\n        title: 'Average spread (R0)',\n        name: 'R0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 2.2\n    },\n    {\n        title: 'Average spread shutdown (R0)',\n        name: 'shutdownR0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 1.05\n    },\n    {\n        title: 'Mortality Rate',\n        name: 'mortalityRate',\n        min: 0,\n        max: 5.0,\n        step: 0.5,\n        defaultValue: 0.5,\n        percent: true\n    },\n    {\n        title: 'Mortality Rate Overflow',\n        name: 'mortalityRateOverflow',\n        min: 0,\n        max: 7.0,\n        step: 0.5,\n        defaultValue: 3.0,\n        percent: true\n    },\n    {\n        title: 'Hospitalization Rate',\n        name: 'hospitalizationRate',\n        min: 0,\n        max: 25,\n        step: 1,\n        defaultValue: 15,\n        percent: true\n    },\n    {\n        title: 'Hospital stay in weeks',\n        name: 'hospitalStayInWeeks',\n        min: 0,\n        max: 2,\n        step: 0.1,\n        defaultValue: 0.3\n    }\n];","import React from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(4),\n      width: '100%'\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    chartContainer: {\n        height: '100%'\n    }\n  }),\n);\n\ninterface Props {\n    config: any;\n}\n\nexport const Chart: React.FC<Props> = ({ config }) => {\n    const classes = useStyles();\n\n    return <Paper elevation={3} className={classes.root}>\n        <HighchartsReact\n            containerProps = {{ className: classes.chartContainer }}\n            highcharts={Highcharts}\n            options={config}\n        />\n    </Paper>;\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\nimport { addWeeks, eachWeekOfInterval, differenceInWeeks } from 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport { Button, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport DateRangeIcon from '@material-ui/icons/DateRange';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport Paper from '@material-ui/core/Paper';\nimport Switch from '@material-ui/core/Switch';\n\n\nexport interface Range {\n    start: Date,\n    end: Date\n};\n\nexport type ShutdownRangeState = Range[];\n\ninterface Props {\n    onChange: (ranges: Range[]) => void;\n    computeOptimalWeeks: () => void;\n    shutdownWeeks?: boolean[];\n    startDate?: Date;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        padding: theme.spacing(4)\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    marginTop: {\n        marginTop: theme.spacing(2)\n    },\n    marginLeft: {\n        marginLeft: theme.spacing(2)\n    },\n    marginLeftAuto: {\n        marginLeft: 'auto'\n    }\n  }),\n);\n\nexport const ShutdownRange: React.FC<Props> = ({ shutdownWeeks, startDate, computeOptimalWeeks, onChange }) => {\n    const classes = useStyles();\n    \n    const [ranges, setRanges] = React.useState<ShutdownRangeState>([{\n        start: new Date(),\n        end: addWeeks(new Date(), 12)\n    }]);\n    const [_shutdownWeeks, setShutdownWeeks] = React.useState([]);\n    const [isWeekView, setIsWeekView] = React.useState(false);\n\n    React.useEffect(() => {\n        onChange(ranges);\n    }, [ranges]);\n\n    React.useEffect(() => {\n        setShutdownWeeks(getShutdownWeeks(ranges, startDate));\n    }, [isWeekView])\n\n    React.useEffect(() => {\n        if((!shutdownWeeks || !startDate)) {\n            return;\n        }\n        const shutdownRanges = getShutdownRanges(startDate, shutdownWeeks);\n        setRanges(shutdownRanges);\n        setShutdownWeeks(shutdownWeeks);\n    }, [shutdownWeeks, startDate]);\n\n    const addRange = () => {\n        let rangeStart = ranges[ranges.length - 1]?.end || new Date();\n        const range = {\n            start: rangeStart,\n            end: rangeStart\n        }\n        setRanges([\n            ...ranges,\n            range\n        ]);\n    }\n\n    const removeRange = (idx: number) => () => {\n        ranges.splice(idx, 1);\n        setRanges([...ranges]);\n    }\n\n    const changeRange = range => type => date => {\n        range[type] = date;\n        if(type === 'start' && range.end < date) {\n            range.end = date;\n        }\n        setRanges([...ranges]);\n    }\n\n    const onWeekViewToggle = (evt) => {\n        setIsWeekView(evt.target.checked);\n    }\n\n    const onWeekToggle = (evt) => {\n        _shutdownWeeks[Number(evt.target.id)] = evt.target.checked;\n        let ranges = getShutdownRanges(startDate, _shutdownWeeks);\n        setShutdownWeeks(_shutdownWeeks);\n        setRanges(ranges);\n    }\n\n    const renderRanges = () => ranges.map((range, idx) => <Grid container item direction=\"row\" spacing={4} alignItems=\"center\">\n        <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('start')}  value={range.start} label='Start'></KeyboardDatePicker></Grid>\n        <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('end')}  value={range.end} label='End'></KeyboardDatePicker></Grid>\n        <Grid item>\n            <IconButton onClick={removeRange(idx)} aria-label=\"delete\">\n                <DeleteIcon />\n            </IconButton>\n        </Grid>\n    </Grid>);\n\n    const renderWeeks = () => <Grid item container direction=\"row\">\n        {_shutdownWeeks.map((week, idx) => \n            <Grid item>\n                <Grid container alignItems=\"center\">\n                    <Switch color=\"primary\" id={idx + ''} checked={week} onChange={onWeekToggle}></Switch>\n                    <Typography variant=\"caption\">{`Week ${idx + 1}`}</Typography>\n                </Grid>\n            </Grid>\n        )}\n    </Grid>\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={2}>\n                <Grid container alignItems=\"center\" justify=\"space-between\">\n                    <Typography className={classes.marginBottom}>Shutdown Dates</Typography>\n                    <Grid item>\n                        <Grid container alignItems=\"center\">\n                            <Checkbox color=\"primary\" onChange={onWeekViewToggle}></Checkbox>\n                            <Typography variant=\"body2\">Week view</Typography>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                {(isWeekView) ? renderWeeks() : renderRanges()}\n                <Grid container item className={classes.marginTop} spacing={2} alignItems=\"center\">\n                    <Button variant=\"contained\" startIcon={<AddIcon />} onClick={addRange}>Add</Button>\n                    <Button variant=\"contained\" className={classes.marginLeft}\n                        startIcon={<RotateLeftIcon />} onClick={_ => setRanges([])}>Reset</Button>\n                    <Button className={classes.marginLeft}\n                        variant=\"contained\" startIcon={<DateRangeIcon />} onClick={computeOptimalWeeks}>Optimize Shutdowns</Button>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\n\nfunction getShutdownRanges(startDate: Date, shutdownWeeks: boolean[]): Range[] {\n    let ranges = [];\n    let currentRange = null;\n    for(let i = 0; i<shutdownWeeks.length; i++) {\n        if(!shutdownWeeks[i] && currentRange) {\n            ranges.push(currentRange);\n            currentRange = null;\n        }\n\n        if(shutdownWeeks[i]) {\n            if(currentRange) {\n                currentRange.end = addWeeks(currentRange.end, 1);\n            } else {\n                currentRange = {\n                    start: addWeeks(startDate, i),\n                    end: addWeeks(startDate, i+1)\n                }\n            }\n        }\n    }\n    if(currentRange) {\n        ranges.push(currentRange);\n    }\n\n    return ranges;\n}\n\nfunction getShutdownWeeks(ranges, startDate) {\n    return ranges.reduce((shutdown, range) => {\n        let start = differenceInWeeks(range.start, startDate);\n        let end = differenceInWeeks(range.end, startDate);\n        for(let i = start; i <= end; i++) {\n            shutdown[i] = true;\n        }\n        return shutdown;\n    }, Array(104).fill(false));\n}\n\nexport function getNumShutdownWeeks(ranges) {\n    return ranges.reduce((numWeeks, range) => {\n        return numWeeks + eachWeekOfInterval(range).length;\n    }, 0)\n}","import React, { useReducer, useEffect } from 'react';\nimport shortNum from 'short-number';\nimport { format, differenceInCalendarWeeks } from 'date-fns';\nimport { SimulatorInputState, generateData} from './data-generator';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\n\nenum Actions {\n    CHANGE_CONTROL,\n    CHANGE_SHUTDOWN\n}\n\nconst reducer = (state: SimulatorInputState, action) => {\n    switch(action.type) {\n        case Actions.CHANGE_CONTROL:\n            return {\n                ...state,\n                controls: action.controls\n            }\n        case Actions.CHANGE_SHUTDOWN:\n            return {\n                ...state,\n                shutdowns: action.shutdowns\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const useGenerateConfig = (): [SimulatorInputState, any, any, any] => {\n    const [state, dispatch] = useReducer(reducer, {\n        controls: {},\n        shutdowns: []\n    });\n    return [\n        state,\n        generateChartConfig(state),\n        (controls) => dispatch({type: Actions.CHANGE_CONTROL, controls}),\n        (shutdowns) => dispatch({type: Actions.CHANGE_SHUTDOWN, shutdowns})\n    ];\n}\n\n\n\n\nfunction generateChartConfig(state: SimulatorInputState) { \n    // TODO: Generate chart config here.\n    let {weeks, lastWeekNum} = generateData(state);\n    let weeksToGo = getWeeksToGo(lastWeekNum, state.controls.infectionStartDate);\n    let series = createSeries(weeks);\n    const options = {\n        subtitle: {\n            text: ''\n        },\n        title: {\n          text: ``,\n        },\n        yAxis: {\n            type: 'logarithmic',\n            title: {\n                text: 'Number of people'\n            },\n        },\n        xAxis: {\n            type: 'datetime',\n            title: {\n                text: 'Date'\n            },\n            gridLineWidth: 1,\n            plotBands: createShutdownBands(state.shutdowns),\n            plotLines: [{\n                value: weeks[lastWeekNum]?.weekStartDate,\n                color: '#013220'\n            }]\n        },\n        plotOptions: {\n            line: {\n                lineWidth: 7\n            }\n        },\n        tooltip: {\n            formatter: function () {\n                return `<b>${this.series.name}</b>:${shortNum(this.y)} <br>` +\n                    `${format(this.x, 'do MMM y')}`;\n            }\n        },\n        series\n    }\n\n    console.log(options);\n    return {\n        config: options,\n        weeks,\n        weeksToGo\n    };\n}\n\nfunction createShutdownBands(shutdowns: ShutdownRangeState) {\n    return shutdowns.map(s => {\n        return {\n            color: '#ffcccb',\n            from: s.start,\n            to: s.end\n        };\n    })\n}\n\n\nfunction createSeries(data) {\n    let series = {};\n    data.forEach(obj => {\n        Object.keys(obj).forEach(key => {\n            series[key] = series[key] || {name: key, data: [], visible: false};\n            series[key].data.push({\n                x: obj.weekStartDate,\n                y: obj[key]\n            });\n        });\n    });\n    delete series['week'];\n    delete series['weekNum'];\n\n    series['totalInfected'].visible = true;\n    series['dead'].visible = true;\n    series['newInfected'].visible = true;\n    return Object.values(series);\n}\n\nfunction getWeeksToGo(lastWeekNum, startDate) {\n    const currentWeekNum = differenceInCalendarWeeks(new Date(), startDate);\n    return lastWeekNum - currentWeekNum;\n}","import { addWeeks, isWithinInterval } from 'date-fns';\nimport { ControlState } from '../controls/controls';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\n\nexport interface SimulatorInputState {\n    controls: ControlState;\n    shutdowns: ShutdownRangeState;\n}\n\nexport class Week {\n    weekStartDate: Date;\n    weekNum: number;\n    healthy: number = 0;\n    newInfected: number = 0;\n    totalInfected: number = 0;\n    currentlyInfected = 0;\n    recovered = 0;\n    dead = 0;\n    hospitalized = 0;\n\n    constructor(params = {}) {\n        Object.assign(this, params);\n    }\n}\n\nexport function generateData(state: SimulatorInputState) {\n    let {\n        totalPopulation,\n        infectionStartDate,\n        R0,\n        shutdownR0,\n        mortalityRate,\n        mortalityRateOverflow,\n        hospitalizationRate,\n        totalHospitalBeds } = state.controls;\n    mortalityRate = mortalityRate / 100;\n    mortalityRateOverflow = mortalityRateOverflow / 100;\n    hospitalizationRate = hospitalizationRate / 100;\n\n    let weeks = [new Week({\n        weekStartDate: infectionStartDate,\n        weekNum: 0,\n        healthy: totalPopulation - 1,\n        newInfected: 1,\n        totalInfected: 1,\n        currentlyInfected: 1,\n        recovered: 0,\n        dead: 0,\n        hospitalized: 0\n    })];\n    let lastWeekNum;\n\n    for(let i=1; i<104; i++) {\n        weeks[i] = new Week();\n        weeks[i].weekStartDate = addWeeks(infectionStartDate, i);\n        let r = (isShutdown(weeks[i].weekStartDate, state.shutdowns))\n            ? shutdownR0 \n            : R0;\n\n        let fractionHealthy = (weeks[i-1].healthy) / totalPopulation;\n        let mortality = (weeks[i-1].hospitalized < totalHospitalBeds)\n            ? mortalityRate\n            : weightedAverage(mortalityRate, mortalityRateOverflow,\n                totalHospitalBeds, weeks[i-1].hospitalized - totalHospitalBeds);\n\n        weeks[i].newInfected = Math.round(weeks[i-1].newInfected * r * fractionHealthy);\n        weeks[i].currentlyInfected = Math.round(weeks[i].newInfected + weeks[i-1].newInfected\n                + ((i >= 2) ? weeks[i-2].newInfected : 0));\n        weeks[i].totalInfected = weeks[i-1].totalInfected + weeks[i].newInfected;\n\n        // 3 weeks later patients either die or recover.\n        if(i >= 3) {\n            weeks[i].dead = Math.round(weeks[i-1].dead + weeks[i - 3].newInfected * mortality);\n            weeks[i].recovered = weeks[i-1].recovered + (weeks[i -3].newInfected *  ( 1 - mortality));\n        }\n        if(i > 2) {\n            weeks[i].hospitalized =  weeks[i -2].newInfected * hospitalizationRate;\n        }\n        weeks[i].healthy = totalPopulation - (weeks[i].currentlyInfected + weeks[i].recovered + weeks[i].dead); \n\n        if(weeks[i].currentlyInfected === 0 && !lastWeekNum) {\n            lastWeekNum = i;\n        }\n    }\n\n    return {\n        lastWeekNum,\n        weeks\n    };\n}\n\nexport function weightedAverage(p0: number, p1: number, w0: number, w1: number) {\n    return ((p0 * w0) + (p1 * w1)) / (w0 + w1);\n}\n\nfunction isShutdown(week, shutdowns) {\n    try {\n        return  shutdowns.some(shutdown => isWithinInterval(week, shutdown));\n    } catch {\n        return false;\n    }\n}","import { ControlState } from '../controls/controls';\nimport { Week, weightedAverage} from './data-generator';\n\nexport function getOptimalWeeks(state: ControlState) {\n    const {\n        totalPopulation,\n        totalHospitalBeds\n    } = state;\n\n    let weeks = [new Week({\n        newInfected: 1,\n        totalInfected: 1,\n        currentlyInfected: 1,\n        healthy: totalPopulation - 1\n    })];\n\n    let shutdown = Array(104).fill(false);\n\n    for(let i = 1; i< 104; i++) {\n        let current: Week, next: Week, next2: Week;\n        current = computeNextWeek(state, false,\n            weeks[i - 1], (i >= 2) ? weeks[i-2] : null, (i >= 3) ? weeks[i - 3] : null);\n        next = computeNextWeek(state, true,\n            current, weeks[i-1], (i >= 2) ? weeks[i-2] : null);\n        next2 = computeNextWeek(state, true,\n            next, current, weeks[i-1]);\n\n        if(current.hospitalized > totalHospitalBeds ||\n            next.hospitalized > totalHospitalBeds ||\n            next2.hospitalized > totalHospitalBeds) {\n                shutdown[i] = true;\n                weeks[i] = computeNextWeek(state, shutdown[i],\n                    weeks[i - 1], (i >= 2) ? weeks[i -2] : null, (i >= 3) ? weeks[i - 3] : null);\n        } else {\n            shutdown[i] = false;\n            weeks[i] = current;\n        }\n    }\n\n    return shutdown;\n}\n\nfunction computeNextWeek(state: ControlState, shutdown: boolean, prev: Week, prev2: Week, prev3: Week): Week {\n    let {\n        R0,\n        shutdownR0,\n        totalPopulation,\n        totalHospitalBeds,\n        mortalityRate,\n        mortalityRateOverflow,\n        hospitalizationRate\n    } = state;\n    mortalityRate = mortalityRate / 100;\n    mortalityRateOverflow = mortalityRateOverflow / 100;\n    hospitalizationRate = hospitalizationRate / 100;\n\n    let result: Week = new Week();\n    const r = (shutdown) ? shutdownR0 : R0;\n    const fractionHealthy = prev.healthy / totalPopulation;\n\n    // Mortality depends on how much overflow there is in the hospitals compared capacity\n    let mortality = (prev.hospitalized < totalHospitalBeds) ? mortalityRate :\n        weightedAverage(mortalityRate, mortalityRateOverflow,\n        totalHospitalBeds, prev.hospitalized - totalHospitalBeds);\n    \n    result.newInfected = Math.round(prev.newInfected * r * fractionHealthy);\n    // Last 2 week + current week's newly infected are still infected. \n    result.currentlyInfected = result.newInfected + prev.newInfected + ((prev2 != null) ? prev2.newInfected : 0);\n    result.totalInfected = prev.totalInfected + result.newInfected;\n    // 3 weeks later patients either die or recover.\n    if (prev3 != null) {\n        result.dead = prev.dead + prev3.newInfected * mortality;\n        result.recovered = prev.recovered + (prev3.newInfected *  ( 1 - mortality));\n    }\n    // We are considering that patients are in hopsital in their third week.\n    if (prev2 != null) {\n        result.hospitalized =  prev2.newInfected * hospitalizationRate;\n    } \n    result.healthy = totalPopulation - (result.currentlyInfected + result.recovered + result.dead);\n    return result; \n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\n\ninterface Props {\n    title: string;\n    value: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        padding: theme.spacing(2),\n        paddingRight: theme.spacing(4),\n        flexGrow: 1\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    marginTop: {\n        marginTop: theme.spacing(2)\n    },\n    marginLeft: {\n        marginLeft: theme.spacing(2)\n    },\n    marginLeftAuto: {\n        marginLeft: 'auto'\n    }\n  }),\n);\n\nexport const Headline: React.FC<Props> = ({ title, value}) => {\n    const classes = useStyles();\n\n    return <Paper className={classes.root} elevation={3}>\n        <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={3}>\n            <Grid item>\n                <Typography variant=\"body1\">{title}</Typography>\n            </Grid>\n            <Grid item>\n                <Typography variant=\"h5\">{value}</Typography>\n            </Grid>\n        </Grid>\n    </Paper>\n}","import React from 'react';\nimport 'date-fns';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport {Controls} from '../controls/controls';\nimport {Chart} from '../chart/chart';\nimport {ShutdownRange, getNumShutdownWeeks} from '../shudown-range/shutdown-range';\nimport {useGenerateConfig} from './use-generate-config';\nimport {getOptimalWeeks} from './optimal-weeks-generator';\nimport {\n    MuiPickersUtilsProvider,\n } from '@material-ui/pickers';\nimport shortNum from 'short-number';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Headline } from '../headline/headline';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n        flexGrow: 1,\n        flexBasis: 0,\n        display: 'flex'\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    }\n  }),\n);\n\nexport const Simulator: React.FC = () => {\n    const classes = useStyles();\n    const [\n        state, \n        {config, weeks, weeksToGo},\n        onControlChange, \n        onShutdownChange] = useGenerateConfig();\n    const [optimalWeeks, setOptimalWeeks] = React.useState<boolean[]>();\n\n    const computeOptimalWeeks = () => {\n        setOptimalWeeks(getOptimalWeeks(state.controls));\n    }\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container spacing={2} direction='row'>\n                <Grid item>\n                    <Controls onChange={onControlChange}></Controls>\n                </Grid>\n                <Grid item direction=\"column\" className={classes.content} spacing={2}>\n                    <Grid item className={classes.marginBottom}>\n                        <ShutdownRange\n                            shutdownWeeks={optimalWeeks}\n                            startDate={state.controls.infectionStartDate}\n                            computeOptimalWeeks={computeOptimalWeeks}\n                            onChange={onShutdownChange}></ShutdownRange>\n                    </Grid>\n                    <Grid item container\n                        direction=\"row\" className={classes.marginBottom} spacing={2}>\n                        <Grid item className={classes.content}> \n                            <Headline title=\"Total Shutdown\" value={`${getNumShutdownWeeks(state.shutdowns)} weeks`}></Headline>\n                        </Grid>\n                        <Grid item className={classes.content}> \n                            <Headline title=\"Time before we play\" value={`${weeksToGo} weeks`}></Headline>\n                        </Grid>\n                        <Grid item className={classes.content}>\n                            <Headline title=\"Deaths\" value={shortNum(weeks[weeks.length - 1].dead)}></Headline>\n                        </Grid>\n                    </Grid>\n                    <Grid item className={classes.content}>\n                        <Chart config={config}></Chart>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport './App.css';\n\nimport {Simulator} from './components/simulator/simulator';\nimport { Container } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    container: {\n      paddingTop: theme.spacing(2)\n    }\n  }),\n);\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            COVID Simulator\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth='lg' className={classes.container}>\n        <Simulator />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}