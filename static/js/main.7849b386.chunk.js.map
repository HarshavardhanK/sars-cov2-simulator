{"version":3,"sources":["components/controls/controls.tsx","components/slider/slider.tsx","components/controls/controls-data.ts","components/simulator/use-generate-config.ts","components/chart/chart.tsx","components/shudown-range/shutdown-range.tsx","components/simulator/data-generator.ts","components/simulator/simulator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Actions","useStyles","makeStyles","slider","width","Slider","title","onChange","percent","props","classes","getValue","value","undefined","Grid","container","direction","alignItems","spacing","item","Typography","min","className","aria-labelledby","valueLabelDisplay","valueLabelFormat","onChangeCommitted","event","name","max","id","variant","sliders","step","defaultValue","initialState","reduce","sliderValues","infectionStartDate","Date","totalPopulation","totalHospitalBeds","theme","createStyles","root","paddingTop","paddingLeft","paddingRight","divider","marginTop","marginBottom","reducer","state","action","type","CHANGE_SLIDER_VALUE","sliderName","CHANGE_START_DATE","CHANGE_POPULATION","CHANGE_BEDS","Controls","React","useReducer","dispatch","useEffect","onSliderChange","Paper","elevation","TextField","label","target","startDate","map","key","padding","chartContainer","height","Chart","config","containerProps","highcharts","Highcharts","options","ShutdownRange","useState","start","end","addWeeks","ranges","setRanges","removeRange","idx","splice","changeRange","range","date","IconButton","onClick","aria-label","Button","startIcon","rangeStart","length","isShutdown","week","shutdowns","some","shutdown","isWithinInterval","CHANGE_CONTROL","controls","CHANGE_SHUTDOWN","generateChartConfig","series","data","forEach","obj","Object","keys","visible","push","x","y","values","createSeries","R0","shutdownR0","mortalityRate","mortalityRateOverflow","hospitalizationRate","weekNum","healthy","newInfected","totalInfected","currentlyInfected","recovered","dead","hospitalized","movingMortalityRate","i","multiplier","previous","previousPrevious","pppNewInfected","pppcurrentlyInfected","Math","round","generateData","text","yAxis","xAxis","gridLineWidth","plotBands","s","color","from","to","plotOptions","line","lineWidth","tooltip","formatter","this","shortNum","format","console","log","content","flexGrow","flexBasis","display","header","Simulator","useGenerateConfig","chartConfig","onControlChange","onShutdownChange","utils","DateFnsUtils","menuButton","marginRight","App","AppBar","position","Toolbar","edge","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7849b386.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport { Button, Typography } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport {\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\nimport {Slider} from '../slider/slider';\nimport {sliders} from './controls-data';\n\nexport interface ControlState {\n    R0?: number;\n    shutdownR0?: number;\n    mortalityRate?: number;\n    mortalityRateOverflow?: number;\n    hospitalizationRate?: number;\n    hospitalStayInWeeks?: number;\n    infectionStartDate?: Date;\n    totalPopulation?: number;\n    totalHospitalBeds?: number;\n}\n\ninterface Props {\n    onChange?: (controls: ControlState) => void;\n}\n\nenum Actions {\n    CHANGE_SLIDER_VALUE,\n    CHANGE_START_DATE,\n    CHANGE_POPULATION,\n    CHANGE_BEDS\n}\n\nconst initialState: ControlState = sliders.reduce((sliderValues, slider) => {\n    sliderValues[slider.name] = slider.defaultValue;\n    return sliderValues;\n}, {});\ninitialState.infectionStartDate = new Date('1/1/2020');\ninitialState.totalPopulation = 331000000;\ninitialState.totalHospitalBeds = 1000000;\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingTop: theme.spacing(4),\n      paddingLeft: theme.spacing(6),\n      paddingRight: theme.spacing(2),\n      width: 250\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    }\n  }),\n);\n\n\n\nfunction reducer(state, action) {\n    switch(action.type) {\n        case Actions.CHANGE_SLIDER_VALUE:\n            return {\n                ...state,\n                [action.sliderName]: action.value\n            }\n        case Actions.CHANGE_START_DATE:\n            return {\n                ...state,\n                infectionStartDate: action.infectionStartDate\n            }\n        case Actions.CHANGE_POPULATION:\n            return {\n                ...state,\n                totalPopulation: action.value\n            }\n        case Actions.CHANGE_BEDS:\n            return {\n                ...state,\n                totalHospitalBeds: action.value\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const Controls: React.FC<Props> = ({ onChange }) => {\n    const classes = useStyles();\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    useEffect(() => {\n        onChange(state);\n    }, [state]);\n\n    const onSliderChange = (sliderName: string, value?) => {\n        dispatch({\n            type: Actions.CHANGE_SLIDER_VALUE,\n            sliderName,\n            value\n        });\n    }\n\n    const onDateChange = (startDate: Date) => {\n        dispatch({\n            type: Actions.CHANGE_START_DATE,\n            startDate\n        })\n    }\n\n    const onPopulationChange = (event) => {\n        dispatch({\n            type: Actions.CHANGE_POPULATION,\n            value: event.target.value\n        })\n    }\n\n    const onBedsChanged = (event) => {\n        dispatch({\n            type: Actions.CHANGE_BEDS,\n            value: event.target.value\n        })\n    }\n\n    return (\n            <Paper elevation={3} className={classes.root}>\n                <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n                    <Grid item>\n                        <Typography>Control Values</Typography>\n                    </Grid>\n                    <Grid item>\n                        <TextField label=\"Total population\"\n                            onChange={onPopulationChange}\n                            value={state.totalPopulation}></TextField>\n                    </Grid>\n                    <Grid item>\n                        <KeyboardDatePicker \n                            onChange={onDateChange}\n                            variant=\"inline\" value={state.infectionStartDate} label='Infection Start date'></KeyboardDatePicker>\n                    </Grid>\n                    <Grid item>\n                        <TextField label=\"Total hospital beds\"\n                            onChange={onBedsChanged}\n                            value={state.totalHospitalBeds}></TextField>\n                    </Grid>\n                    {sliders.map(slider => <Grid item key={slider.name}>\n                        <Slider {...slider} onChange={onSliderChange}></Slider>\n                    </Grid>)}\n                </Grid>\n            </Paper>\n               \n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport {Slider as MaterialSlider, SliderProps as MaterialSliderProps} from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\n\ninterface SliderProps {\n    title: string;\n    percent?: boolean;\n    onChange: (name: string, value: number) => void;\n}\n\nconst useStyles = makeStyles({\n    slider: {\n      width: 150,\n    },\n  });\n  \n\nexport const Slider: React.FC<SliderProps & Omit<MaterialSliderProps, 'onChange'>> = ({title, onChange, percent = false, ...props}) => {\n    const classes = useStyles()\n\n    const getValue = (value: number | undefined) => {\n        if(value === undefined) {\n            return '';\n        }\n\n        if(percent) {\n            return `${value}%`;\n        }\n        return value;\n    }\n\n    const onSliderChange = (event, value?) => {\n        onChange(props.name, value);\n    }\n\n    return (\n        <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={0}>\n            \n            <Grid item container direction=\"row\" spacing={1} alignItems=\"center\">\n                <Grid item>\n                    <Typography>\n                        {getValue(props.min)}\n                    </Typography>\n                </Grid>\n                <Grid item className={classes.slider}>\n                    <MaterialSlider\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"on\"\n                        valueLabelFormat={getValue}\n                        onChangeCommitted={onSliderChange}\n                        {...props}\n                    />\n                </Grid>\n                <Grid>\n                    <Typography>\n                        {getValue(props.max)}\n                    </Typography>\n                </Grid>\n                \n            </Grid>\n            <Grid item>\n                <Typography id=\"discrete-slider\" variant=\"caption\">\n                    {title}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}","export const sliders = [\n    {\n        title: 'Average spread (R0)',\n        name: 'R0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 2.2\n    },\n    {\n        title: 'Average spread shutdown (R0)',\n        name: 'shutdownR0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 1.05\n    },\n    {\n        title: 'Mortality Rate',\n        name: 'mortalityRate',\n        min: 0,\n        max: 5.0,\n        step: 0.5,\n        defaultValue: 0.5,\n        percent: true\n    },\n    {\n        title: 'Mortality Rate Overflow',\n        name: 'mortalityRateOverflow',\n        min: 0,\n        max: 7.0,\n        step: 0.5,\n        defaultValue: 3.0,\n        percent: true\n    },\n    {\n        title: 'Hospitalization Rate',\n        name: 'hospitalizationRate',\n        min: 0,\n        max: 25,\n        step: 1,\n        defaultValue: 15,\n        percent: true\n    },\n    {\n        title: 'Hospital stay in weeks',\n        name: 'hospitalStayInWeeks',\n        min: 0,\n        max: 2,\n        step: 0.1,\n        defaultValue: 0.3\n    }\n];","import React, { useReducer, useEffect } from 'react';\nimport shortNum from 'short-number';\nimport { format } from 'date-fns';\nimport { SimulatorInputState, generateData} from './data-generator';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\n\nenum Actions {\n    CHANGE_CONTROL,\n    CHANGE_SHUTDOWN\n}\n\nconst reducer = (state: SimulatorInputState, action) => {\n    switch(action.type) {\n        case Actions.CHANGE_CONTROL:\n            return {\n                ...state,\n                controls: action.controls\n            }\n        case Actions.CHANGE_SHUTDOWN:\n            return {\n                ...state,\n                shutdowns: action.shutdowns\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const useGenerateConfig = (): any[] => {\n    const [state, dispatch] = useReducer(reducer, {\n        controls: {},\n        shutdowns: []\n    });\n    return [\n        generateChartConfig(state),\n        (controls) => dispatch({type: Actions.CHANGE_CONTROL, controls}),\n        (shutdowns) => dispatch({type: Actions.CHANGE_SHUTDOWN, shutdowns})\n    ];\n}\n\n\n\n\nfunction generateChartConfig(state: SimulatorInputState) { \n    // TODO: Generate chart config here.\n    let data = generateData(state);\n    let series = createSeries(data);\n    const options = {\n        title: {\n          text: ''\n        },\n        yAxis: {\n            type: 'logarithmic',\n            title: 'Number of people'\n            \n        },\n        xAxis: {\n            type: 'datetime',\n            title: 'Date',\n            gridLineWidth: 1,\n            plotBands: createShutdownBands(state.shutdowns)\n        },\n        plotOptions: {\n            line: {\n                lineWidth: 4\n            }\n        },\n        tooltip: {\n            formatter: function () {\n                return `<b>${this.series.name}</b>:${shortNum(this.y)} <br>` +\n                    `${format(this.x, 'do MMM y')}`;\n            }\n        },\n        series\n    }\n\n    console.log(options);\n    return options;\n}\n\nfunction createShutdownBands(shutdowns: ShutdownRangeState) {\n    return shutdowns.map(s => {\n        return {\n            color: '#ffcccb',\n            from: s.start,\n            to: s.end\n        };\n    })\n}\n\n\nfunction createSeries(data) {\n    let series = {};\n    data.forEach(obj => {\n        Object.keys(obj).forEach(key => {\n            series[key] = series[key] || {name: key, data: [], visible: false};\n            series[key].data.push({\n                x: obj.week,\n                y: obj[key]\n            });\n        });\n    });\n    delete series['week'];\n    delete series['weekNum'];\n\n    series['totalInfected'].visible = true;\n    series['dead'].visible = true;\n    series['newInfected'].visible = true;\n    return Object.values(series);\n}","import React from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(4),\n      width: '100%'\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    chartContainer: {\n        height: '100%'\n    }\n  }),\n);\n\ninterface Props {\n    config: any;\n}\n\nexport const Chart: React.FC<Props> = ({ config }) => {\n    const classes = useStyles();\n\n    return <Paper elevation={3} className={classes.root}>\n        <HighchartsReact\n            containerProps = {{ className: classes.chartContainer }}\n            highcharts={Highcharts}\n            options={config}\n        />\n    </Paper>;\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport { addWeeks } from 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport { Button, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Paper from '@material-ui/core/Paper';\n\n\nexport interface Range {\n    start: Date,\n    end: Date\n};\n\nexport type ShutdownRangeState = Range[];\n\ninterface Props {\n    onChange: (ranges: Range[]) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        padding: theme.spacing(4)\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    marginTop: {\n        marginTop: theme.spacing(2)\n    }\n  }),\n);\n\nexport const ShutdownRange: React.FC<Props> = ({ onChange }) => {\n    const classes = useStyles();\n    const [ranges, setRanges] = React.useState<ShutdownRangeState>([{\n        start: new Date(),\n        end: addWeeks(new Date(), 12)\n    }]);\n    React.useEffect(() => {\n        onChange(ranges);\n    }, [ranges]);\n\n    const addRange = () => {\n        let rangeStart = ranges[ranges.length - 1]?.end || new Date();\n        const range = {\n            start: rangeStart,\n            end: rangeStart\n        }\n        setRanges([\n            ...ranges,\n            range\n        ]);\n    }\n\n    const removeRange = (idx: number) => () => {\n        ranges.splice(idx, 1);\n        setRanges([...ranges]);\n    }\n\n    const changeRange = range => type => date => {\n        range[type] = date;\n        if(type === 'start') {\n            range.end = date;\n        }\n        setRanges([...ranges]);\n    }\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={2}>\n                <Typography className={classes.marginBottom}>Shutdown Dates</Typography>\n                {ranges.map((range, idx) => <Grid container item direction=\"row\" spacing={4} alignItems=\"center\">\n                    <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('start')}  value={range.start} label='Start'></KeyboardDatePicker></Grid>\n                    <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('end')}  value={range.end} label='End'></KeyboardDatePicker></Grid>\n                    <Grid item>\n                        <IconButton onClick={removeRange(idx)} aria-label=\"delete\">\n                            <DeleteIcon />\n                        </IconButton>\n                    </Grid>\n                </Grid>)}\n                <Grid item className={classes.marginTop}>\n                    <Button variant=\"contained\" startIcon={<AddIcon />} onClick={addRange}>Add</Button>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}","import { addWeeks, isWithinInterval } from 'date-fns';\nimport { ControlState } from '../controls/controls';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\n\nexport interface SimulatorInputState {\n    controls: ControlState;\n    shutdowns: ShutdownRangeState;\n}\n\nexport function generateData(state: SimulatorInputState) {\n    let {\n        totalPopulation,\n        infectionStartDate,\n        R0,\n        shutdownR0,\n        mortalityRate,\n        mortalityRateOverflow,\n        hospitalizationRate,\n        totalHospitalBeds } = state.controls;\n\n    let data = [{\n        week: infectionStartDate,\n        weekNum: 0,\n        healthy: totalPopulation - 1,\n        newInfected: 1,\n        totalInfected: 1,\n        currentlyInfected: 1,\n        recovered: 0,\n        dead: 0,\n        hospitalized: 0,\n        movingMortalityRate: mortalityRate\n    }];\n\n    for(let i=1;i<100;i++) {\n        let week = addWeeks(infectionStartDate, i);\n        let multiplier = (isShutdown(week, state.shutdowns))\n         ? shutdownR0 \n         : R0;\n        let previous = data[i-1];\n        let previousPrevious = data[i-2];\n        let pppNewInfected = data[i-3]?.newInfected || 0;\n        let pppcurrentlyInfected = data[i-3]?.currentlyInfected || 0;\n\n        let newInfected = Math.round((previous.healthy/totalPopulation)*previous.newInfected*multiplier);\n        let totalInfected = previous.totalInfected + newInfected;\n        let currentlyInfected = newInfected + previous.newInfected + (previousPrevious?.newInfected || 0);\n        let recovered = Math.round((1 - (previous.movingMortalityRate/100))*pppNewInfected) + previous.recovered;\n        let dead = Math.round(pppNewInfected * previous.movingMortalityRate/100) + previous.dead;\n        let hospitalized = Math.round(pppcurrentlyInfected * hospitalizationRate/100);\n        let movingMortalityRate = (hospitalized < totalHospitalBeds)\n            ? mortalityRate\n            : (mortalityRateOverflow*(hospitalized - totalHospitalBeds) + mortalityRate*totalHospitalBeds)/hospitalized;\n        let healthy = totalPopulation - currentlyInfected - recovered - dead;\n\n        data[i] = {\n            week,\n            weekNum: i,\n            newInfected,\n            totalInfected,\n            currentlyInfected,\n            recovered,\n            dead,\n            hospitalized,\n            movingMortalityRate,\n            healthy\n        }\n    }\n\n    return data;\n}\n\nfunction isShutdown(week, shutdowns) {\n    try {\n        return  shutdowns.some(shutdown => isWithinInterval(week, shutdown));\n    } catch {\n        return false;\n    }\n}","import React from 'react';\nimport 'date-fns';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport {Controls} from '../controls/controls';\nimport {Chart} from '../chart/chart';\nimport {ShutdownRange} from '../shudown-range/shutdown-range';\nimport {useGenerateConfig} from './use-generate-config';\nimport {\n    MuiPickersUtilsProvider,\n } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n        flexGrow: 1,\n        flexBasis: 'auto',\n        display: 'flex'\n    },\n    header: {\n        marginBottom: theme.spacing(2)\n    }\n  }),\n);\n\nexport const Simulator: React.FC = () => {\n    const classes = useStyles();\n    const [chartConfig, onControlChange, onShutdownChange] = useGenerateConfig();\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container spacing={2} direction='row'>\n                <Grid item>\n                    <Controls onChange={onControlChange}></Controls>\n                </Grid>\n                <Grid item direction=\"column\" className={classes.content} spacing={2}>\n                    <Grid item className={classes.header}>\n                        <ShutdownRange onChange={onShutdownChange}></ShutdownRange>\n                    </Grid>\n                    <Grid item className={classes.content}>\n                        <Chart config={chartConfig}></Chart>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport './App.css';\n\nimport {Simulator} from './components/simulator/simulator';\nimport { Container } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    container: {\n      paddingTop: theme.spacing(2)\n    }\n  }),\n);\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            COVID Simulator\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth='lg' className={classes.container}>\n        <Simulator />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}