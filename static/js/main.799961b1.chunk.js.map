{"version":3,"sources":["components/controls/controls.tsx","components/slider/slider.tsx","components/controls/controls-data.ts","components/simulator/use-generate-config.ts","components/chart/chart.tsx","components/shudown-range/shutdown-range.tsx","components/simulator/simulator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Actions","useStyles","makeStyles","slider","width","Slider","title","onChange","percent","props","classes","getValue","value","undefined","Grid","container","direction","alignItems","spacing","item","Typography","min","className","aria-labelledby","valueLabelDisplay","valueLabelFormat","onChangeCommitted","event","name","max","id","variant","sliders","step","defaultValue","theme","createStyles","root","paddingTop","paddingLeft","paddingRight","divider","marginTop","marginBottom","reducer","state","action","type","CHANGE_SLIDER_VALUE","sliderName","CHANGE_START_DATE","startDate","initialState","reduce","sliderValues","infectionStartDate","Date","Controls","React","useReducer","dispatch","useEffect","onSliderChange","Paper","elevation","label","map","key","padding","chartContainer","height","Chart","config","containerProps","highcharts","Highcharts","options","ShutdownRange","useState","ranges","setRanges","removeRange","idx","splice","changeRange","range","date","start","end","IconButton","onClick","aria-label","Button","startIcon","CHANGE_CONTROL","controls","CHANGE_SHUTDOWN","shutdowns","generateChartConfig","totalInfected","x","y","newInfected","totalDead","i","addWeeks","Math","floor","mortalityRate","week","multiplier","isShutdown","shutdownR0","R0","ceil","text","yAxis","xAxis","series","data","some","shutdown","isWithinInterval","content","flexGrow","flexBasis","display","header","Simulator","useGenerateConfig","chartConfig","onControlChange","onShutdownChange","utils","DateFnsUtils","menuButton","marginRight","App","AppBar","position","Toolbar","edge","color","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.799961b1.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport { Button, Typography } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Divider from '@material-ui/core/Divider';\nimport {\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\nimport {Slider} from '../slider/slider';\nimport {ShutdownRange, Range} from '../shudown-range/shutdown-range';\nimport {sliders} from './controls-data';\n\nexport interface ControlState {\n    R0?: number;\n    shutdownR0?: number;\n    mortalityRate?: number;\n    mortalityRateOverflow?: number;\n    hospitalizationRate?: number;\n    hospitalStayInWeeks?: number;\n    infectionStartDate?: Date;\n}\n\ninterface Props {\n    onChange?: (controls: ControlState) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingTop: theme.spacing(4),\n      paddingLeft: theme.spacing(6),\n      paddingRight: theme.spacing(2),\n      width: 250\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    }\n  }),\n);\n\nenum Actions {\n    CHANGE_SLIDER_VALUE,\n    CHANGE_START_DATE\n}\n\nfunction reducer(state, action) {\n    switch(action.type) {\n        case Actions.CHANGE_SLIDER_VALUE:\n            return {\n                ...state,\n                [action.sliderName]: action.value\n            }\n        case Actions.CHANGE_START_DATE:\n            return {\n                ...state,\n                startDate: action.startDate\n            }\n        default:\n            return state;\n    }\n}\n\nconst initialState: ControlState = sliders.reduce((sliderValues, slider) => {\n    sliderValues[slider.name] = slider.defaultValue;\n    return sliderValues;\n}, {});\ninitialState.infectionStartDate = new Date('1/1/2020');\n\nexport const Controls: React.FC<Props> = ({ onChange }) => {\n    const classes = useStyles();\n    const [state, dispatch] = React.useReducer(reducer, initialState);\n    useEffect(() => {\n        onChange(state);\n    }, [state]);\n\n    const onSliderChange = (sliderName: string, value?) => {\n        dispatch({\n            type: Actions.CHANGE_SLIDER_VALUE,\n            sliderName,\n            value\n        });\n    }\n\n    const onDateChange = (startDate: Date) => {\n        dispatch({\n            type: Actions.CHANGE_START_DATE,\n            startDate\n        })\n    }\n\n    return (\n            <Paper elevation={3} className={classes.root}>\n                <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={10}>\n                    <Grid item>\n                        <Typography>Control Values</Typography>\n                    </Grid>\n                    <Grid item>\n                        <KeyboardDatePicker \n                            onChange={onDateChange}\n                            variant=\"inline\" value={state.infectionStartDate} label='Infection Start date'></KeyboardDatePicker>\n                    </Grid>\n                    {sliders.map(slider => <Grid item key={slider.name}>\n                        <Slider {...slider} onChange={onSliderChange}></Slider>\n                    </Grid>)}\n                </Grid>\n            </Paper>\n               \n    )\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport {Slider as MaterialSlider, SliderProps as MaterialSliderProps} from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\n\ninterface SliderProps {\n    title: string;\n    percent?: boolean;\n    onChange: (name: string, value: number) => void;\n}\n\nconst useStyles = makeStyles({\n    slider: {\n      width: 150,\n    },\n  });\n  \n\nexport const Slider: React.FC<SliderProps & Omit<MaterialSliderProps, 'onChange'>> = ({title, onChange, percent = false, ...props}) => {\n    const classes = useStyles()\n\n    const getValue = (value: number | undefined) => {\n        if(value === undefined) {\n            return '';\n        }\n\n        if(percent) {\n            return `${value}%`;\n        }\n        return value;\n    }\n\n    const onSliderChange = (event, value?) => {\n        onChange(props.name, value);\n    }\n\n    return (\n        <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={0}>\n            \n            <Grid item container direction=\"row\" spacing={1} alignItems=\"center\">\n                <Grid item>\n                    <Typography>\n                        {getValue(props.min)}\n                    </Typography>\n                </Grid>\n                <Grid item className={classes.slider}>\n                    <MaterialSlider\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"on\"\n                        valueLabelFormat={getValue}\n                        onChangeCommitted={onSliderChange}\n                        {...props}\n                    />\n                </Grid>\n                <Grid>\n                    <Typography>\n                        {getValue(props.max)}\n                    </Typography>\n                </Grid>\n                \n            </Grid>\n            <Grid item>\n                <Typography id=\"discrete-slider\" variant=\"caption\">\n                    {title}\n                </Typography>\n            </Grid>\n        </Grid>\n    )\n}","export const sliders = [\n    {\n        title: 'Average spread (R0)',\n        name: 'R0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 2.2\n    },\n    {\n        title: 'Average spread shutdown (R0)',\n        name: 'shutdownR0',\n        min: 0,\n        max: 3.0,\n        step: 0.1,\n        defaultValue: 1.05\n    },\n    {\n        title: 'Mortality Rate',\n        name: 'mortalityRate',\n        min: 0,\n        max: 5.0,\n        step: 0.5,\n        defaultValue: 0.5,\n        percent: true\n    },\n    {\n        title: 'Mortality Rate Overflow',\n        name: 'mortalityRateOverflow',\n        min: 0,\n        max: 7.0,\n        step: 0.5,\n        defaultValue: 3.0,\n        percent: true\n    },\n    {\n        title: 'Hospitalization Rate',\n        name: 'hospitalizationRate',\n        min: 0,\n        max: 25,\n        step: 1,\n        defaultValue: 15,\n        percent: true\n    },\n    {\n        title: 'Hospital stay in weeks',\n        name: 'hospitalStayInWeeks',\n        min: 0,\n        max: 2,\n        step: 0.1,\n        defaultValue: 0.3\n    }\n];","import React, { useReducer, useEffect } from 'react';\nimport { addWeeks, isWithinInterval } from 'date-fns';\nimport { ControlState } from '../controls/controls';\nimport { ShutdownRangeState } from '../shudown-range/shutdown-range';\n\ninterface SimulatorInputState {\n    controls: ControlState;\n    shutdowns: ShutdownRangeState;\n}\n\nenum Actions {\n    CHANGE_CONTROL,\n    CHANGE_SHUTDOWN\n}\n\nconst reducer = (state: SimulatorInputState, action) => {\n    switch(action.type) {\n        case Actions.CHANGE_CONTROL:\n            return {\n                ...state,\n                controls: action.controls\n            }\n        case Actions.CHANGE_SHUTDOWN:\n            return {\n                ...state,\n                shutdowns: action.shutdowns\n            }\n        \n        default:\n            return state;\n    }\n}\n\nexport const useGenerateConfig = (): any[] => {\n    const [state, dispatch] = useReducer(reducer, {\n        controls: {},\n        shutdowns: []\n    });\n    return [\n        generateChartConfig(state),\n        (controls) => dispatch({type: Actions.CHANGE_CONTROL, controls}),\n        (shutdowns) => dispatch({type: Actions.CHANGE_SHUTDOWN, shutdowns})\n    ];\n}\n\nfunction generateChartConfig(state: SimulatorInputState) { \n    // TODO: Generate chart config here.\n    let totalInfected = [{\n        x: state.controls.infectionStartDate,\n        y: 1\n    }];\n\n    let newInfected = [{\n        x: state.controls.infectionStartDate,\n        y: 1\n    }];\n\n    let totalDead = [{\n        x: state.controls.infectionStartDate,\n        y: 0\n    }]\n\n    for(let i=1;i<50;i++) {\n        \n        totalDead[i] = {\n            x: addWeeks(totalDead[i-1].x, 1),\n            y: Math.floor((totalInfected[i-3]?.y || 0) * state.controls.mortalityRate / 100)\n        }\n\n        let week = addWeeks(totalInfected[i-1].x, 1);\n        let multiplier = (isShutdown(week, state.shutdowns))\n         ? state.controls.shutdownR0 \n         : state.controls.R0;\n\n        totalInfected[i] = {\n            y: (\n                Math.ceil(totalInfected[i-1].y * multiplier)\n                - (totalInfected[i-3]?.y || 0)\n                - totalDead[i].y\n            ),\n            x: week\n        };\n\n        newInfected[i] = {\n            x: addWeeks(newInfected[i-1].x, 1),\n            y: totalInfected[i].y - (totalInfected[i-3]?.y || 0)\n        }\n\n    }\n    const options = {\n        title: {\n          text: ''\n        },\n        yAxis: {\n            type: 'logarithmic',\n            title: 'Number of people'\n            \n        },\n        xAxis: {\n            type: 'datetime',\n            title: 'Date'\n        },\n        series: [{\n          name: 'Total infected',\n          data: totalInfected\n        }, {\n            name: 'New Infected',\n            data: newInfected\n        }, {\n            name: 'Total Dead',\n            data: totalDead\n        }]\n    }\n\n    return options;\n}\n\nfunction isShutdown(week, shutdowns) {\n    try {\n        return  shutdowns.some(shutdown => isWithinInterval(week, shutdown));\n    } catch {\n        return false;\n    }\n}","import React from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Paper } from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(4),\n      width: '100%'\n    },\n    divider: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    },\n    chartContainer: {\n        height: '100%'\n    }\n  }),\n);\n\ninterface Props {\n    config: any;\n}\n\nexport const Chart: React.FC<Props> = ({ config }) => {\n    const classes = useStyles();\n\n    return <Paper elevation={3} className={classes.root}>\n        <HighchartsReact\n            containerProps = {{ className: classes.chartContainer }}\n            highcharts={Highcharts}\n            options={config}\n        />\n    </Paper>;\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport Grid from '@material-ui/core/Grid';\nimport { Button, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Paper from '@material-ui/core/Paper';\n\n\nexport interface Range {\n    start: Date,\n    end: Date\n};\n\nexport type ShutdownRangeState = Range[];\n\ninterface Props {\n    onChange: (ranges: Range[]) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        padding: theme.spacing(4)\n    },\n    marginBottom: {\n        marginBottom: theme.spacing(2)\n    },\n    marginTop: {\n        marginTop: theme.spacing(2)\n    }\n  }),\n);\n\nexport const ShutdownRange: React.FC<Props> = ({ onChange }) => {\n    const classes = useStyles();\n    const [ranges, setRanges] = React.useState<ShutdownRangeState>([]);\n    React.useEffect(() => {\n        onChange(ranges);\n    }, [ranges]);\n\n    const addRange = () => {\n        const range = {\n            start: new Date(),\n            end: new Date()\n        }\n        setRanges([\n            ...ranges,\n            range\n        ]);\n    }\n\n    const removeRange = (idx: number) => () => {\n        ranges.splice(idx, 1);\n        setRanges([...ranges]);\n    }\n\n    const changeRange = range => type => date => {\n        range[type] = date;\n        setRanges([...ranges]);\n    }\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <Grid container direction=\"column\" alignItems=\"flex-start\" spacing={2}>\n                <Typography className={classes.marginBottom}>Shutdown Dates</Typography>\n                {ranges.map((range, idx) => <Grid container item direction=\"row\" spacing={4} alignItems=\"center\">\n                    <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('start')}  value={range.start} label='Start'></KeyboardDatePicker></Grid>\n                    <Grid item><KeyboardDatePicker variant=\"inline\" onChange={changeRange(range)('end')}  value={range.end} label='End'></KeyboardDatePicker></Grid>\n                    <Grid item>\n                        <IconButton onClick={removeRange(idx)} aria-label=\"delete\">\n                            <DeleteIcon />\n                        </IconButton>\n                    </Grid>\n                </Grid>)}\n                <Grid item className={classes.marginTop}>\n                    <Button variant=\"contained\" startIcon={<AddIcon />} onClick={addRange}>Add</Button>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}","import React from 'react';\nimport 'date-fns';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport {Controls} from '../controls/controls';\nimport {Chart} from '../chart/chart';\nimport {ShutdownRange} from '../shudown-range/shutdown-range';\nimport {useGenerateConfig} from './use-generate-config';\nimport {\n    MuiPickersUtilsProvider,\n } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    content: {\n        flexGrow: 1,\n        flexBasis: 'auto',\n        display: 'flex'\n    },\n    header: {\n        marginBottom: theme.spacing(2)\n    }\n  }),\n);\n\nexport const Simulator: React.FC = () => {\n    const classes = useStyles();\n    const [chartConfig, onControlChange, onShutdownChange] = useGenerateConfig();\n\n    return (\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container spacing={2} direction='row'>\n                <Grid item>\n                    <Controls onChange={onControlChange}></Controls>\n                </Grid>\n                <Grid item direction=\"column\" className={classes.content} spacing={2}>\n                    <Grid item className={classes.header}>\n                        <ShutdownRange onChange={onShutdownChange}></ShutdownRange>\n                    </Grid>\n                    <Grid item className={classes.content}>\n                        <Chart config={chartConfig}></Chart>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MuiPickersUtilsProvider>\n    )\n}","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport './App.css';\n\nimport {Simulator} from './components/simulator/simulator';\nimport { Container } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    container: {\n      paddingTop: theme.spacing(5)\n    }\n  }),\n);\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            COVID Simulator\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth='lg' className={classes.container}>\n        <Simulator />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}